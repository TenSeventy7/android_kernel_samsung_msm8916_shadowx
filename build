#!/bin/bash
#
#  =========================
#  
#  Copyright (C) 2019-2020 TenSeventy7
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#  
#  =========================
#  

export ARCH=arm
export SUBARCH=arm

TOOLCHAIN=$HOME/Toolchains/arm-eabi-4.8-ubertc
TOOLCHAIN_EXT=$(pwd)/toolchain/arm-eabi-4.8-ubertc
DTBTOOL=$(pwd)/tools/dtbTool

DEVICE_BUILD=`echo $1 | tr 'A-Z' 'a-z'`
CONFIG_DIR=$(pwd)/arch/arm/configs
OUTPUT_DIR=$(pwd)/output
DEIVCE_OUTPUT_DIR=${OUTPUT_DIR}/${DEVICE_BUILD}
BUILDDATE=$(date +%s)
DEVICES_SUPPORTED=`cat $(pwd)/.supported-devices`

FILE_OUTPUT=Galahad_${DEVICE_BUILD}_${BUILDDATE}.zip

script_echo() {
	echo "  $1"
}

exit_script() {
	kill -INT $$
}

download_toolchain() {
	git clone https://bitbucket.org/UBERTC/arm-eabi-4.8.git ${TOOLCHAIN_EXT}
	verify_toolchain
}

verify_toolchain() {
	if [[ -d "${TOOLCHAIN}" ]]
	then
		sleep 2
		script_echo "I: Toolchain found at default location"
		export PATH="${TOOLCHAIN}/bin/:$PATH"
		export CROSS_COMPILE=${TOOLCHAIN}/bin/arm-eabi-
	elif [[ -d "${TOOLCHAIN_EXT}" ]]
	then
		sleep 2
		script_echo "I: Toolchain found at repository root"
		export PATH="${TOOLCHAIN_EXT}/bin/:$PATH"
		export CROSS_COMPILE=${TOOLCHAIN_EXT}/bin/arm-eabi-
	else
		script_echo "I: Toolchain not found at default location or repository root"
		script_echo "   Downloading recommended toolchain at ${TOOLCHAIN_EXT}..."
		download_toolchain
	fi
}

make_output() {
	if [[ ! -d "${OUTPUT_DIR}" ]]
	then
	    mkdir ${OUTPUT_DIR}
	fi

	if [[ ! -d "${DEIVCE_OUTPUT_DIR}" ]]
	then
	    mkdir ${DEIVCE_OUTPUT_DIR}
	fi
}

show_usage() {
	script_echo "USAGE: ./build [device] [22/23/25] [ci]"
	script_echo " "
	script_echo "Currently supported devices:"
	echo "${DEVICES_SUPPORTED}"
	exit_script
}

check_defconfig() {
	if [[ ! -e "${CONFIG_DIR}/${CHECK_DEFCONFIG}" ]]
	then
		script_echo "E: Defconfig not found!"
		script_echo "   ${CONFIG_DIR}/${CHECK_DEFCONFIG}"
		script_echo "   Make sure it is in the proper directory."
		script_echo ""
		show_usage
	else
		sleep 2
	fi
}

api_variant_check() {
	if [ "$API_DEFCONFIG" == "NONE" ]; then
		script_echo "E: API Variant not defined!"
		show_usage
	elif [ "$API_DEFCONFIG" == "INVALID" ]; then
		script_echo "E: API invalid!"
		show_usage
	else
		CHECK_DEFCONFIG=${API_DEFCONFIG}
		check_defconfig
	fi
}

define_variant() {
	DEVICE_VARIANT=msm8916_sec_${DEVICE_BUILD}_eur
	VARIANT_DEFCONFIG=${DEVICE_VARIANT}_defconfig
	CHECK_DEFCONFIG=${VARIANT_DEFCONFIG}
	check_defconfig

	FILE_OUTPUT=ArKernel_${DEVICE_BUILD}_${BUILDDATE}.zip

	make_output
	make -C $(pwd) O=${DEIVCE_OUTPUT_DIR} VARIANT_DEFCONFIG=$VARIANT_DEFCONFIG msm8916_sec_defconfig SELINUX_DEFCONFIG=selinux_defconfig

}

build_dtb() {
	./tools/dtbTool -o ${DEIVCE_OUTPUT_DIR}/arch/arm/boot/dt.img -s 2048 -p ${DEIVCE_OUTPUT_DIR}/scripts/dtc/ ${DEIVCE_OUTPUT_DIR}/arch/arm/boot/dts/
}

build_kernel() {
	make -C $(pwd) O=${DEIVCE_OUTPUT_DIR}
	cp `find ${DEIVCE_OUTPUT_DIR} -iname *.ko` $(pwd)/anykernel/modules/system/lib/modules -rf
	mkdir $(pwd)/anykernel/modules/system/lib/modules/pronto
	cp $(pwd)/anykernel/modules/system/lib/modules/wlan.ko $(pwd)/anykernel/modules/system/lib/modules/pronto/pronto_wlan.ko -f
}

ak_compose_manifest() {
	MANIFEST_TOP=`cat ../tools/ak/.manifest-top`
	MANIFEST_BOTTOM=`cat ../tools/ak/.manifest-bottom`

	touch ./device.ark.sh
	echo "${MANIFEST_TOP}" > ./device.ark.sh
	echo "device.name1=${DEVICE_BUILD}" >> ./device.ark.sh
	echo "device.name2=lineage_${DEVICE_BUILD}" >> ./device.ark.sh
	echo "device.name3=dot_${DEVICE_BUILD}" >> ./device.ark.sh
	echo "device.name4=aosp_${DEVICE_BUILD}" >> ./device.ark.sh
	echo "device.name5=pa_${DEVICE_BUILD}" >> ./device.ark.sh
	echo "device.name6=fortuna3g" >> ./device.ark.sh
	echo ${MANIFEST_BOTTOM} >> ./device.ark.sh
}

build_zip() {
	mv ${DEIVCE_OUTPUT_DIR}/arch/arm/boot/zImage $(pwd)/anykernel/zImage -f
	mv ${DEIVCE_OUTPUT_DIR}/arch/arm/boot/dt.img $(pwd)/anykernel/Image.gz-dtb -f
	cd $(pwd)/anykernel
	ak_compose_manifest
	zip -9 -r ./${FILE_OUTPUT} ./*
	cd ../
	mv $(pwd)/anykernel/${FILE_OUTPUT} $(pwd)/${FILE_OUTPUT}
}

build_kernel_full() {
	build_kernel
	build_dtb
	build_zip

	script_echo "I: Build is done!"
	script_echo "I: Install ZIP is located at"
	script_echo "	$(pwd)/${FILE_OUTPUT}"
}


script_echo ''
script_echo '====================================================='
script_echo '                   ArKernel Builder                  '
script_echo '          by TenSeventy7 - Licensed in GPLv3         '
script_echo '        Updated Aug 8 2020 for Project ShadowX       '
script_echo '====================================================='
script_echo ''

verify_toolchain

if [ ! "$1" == "" ]; then
	sleep 5
	define_variant
	build_kernel_full
else
	script_echo "E: Defconfig not defined!"
	show_usage
fi
